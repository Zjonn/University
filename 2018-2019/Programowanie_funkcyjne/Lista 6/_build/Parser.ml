type token =
  | VAR of (string)
  | NAME of (string)
  | EQ
  | COLON
  | SEMICOLON
  | LPAR
  | RPAR
  | LBR
  | RBR
  | COMMA
  | CONJ
  | DISJ
  | IMPL
  | TOP
  | BOT
  | KW_GOAL
  | KW_CI
  | KW_CE1
  | KW_CE2
  | KW_DI1
  | KW_DI2
  | KW_DE
  | KW_II
  | KW_IE
  | KW_TI
  | KW_FE
  | KW_AX
  | EOF

open Parsing;;
let _ = parse_error;;
# 18 "Parser.mly"
    open Syntax

# 37 "Parser.ml"
let yytransl_const = [|
  259 (* EQ *);
  260 (* COLON *);
  261 (* SEMICOLON *);
  262 (* LPAR *);
  263 (* RPAR *);
  264 (* LBR *);
  265 (* RBR *);
  266 (* COMMA *);
  267 (* CONJ *);
  268 (* DISJ *);
  269 (* IMPL *);
  270 (* TOP *);
  271 (* BOT *);
  272 (* KW_GOAL *);
  273 (* KW_CI *);
  274 (* KW_CE1 *);
  275 (* KW_CE2 *);
  276 (* KW_DI1 *);
  277 (* KW_DI2 *);
  278 (* KW_DE *);
  279 (* KW_II *);
  280 (* KW_IE *);
  281 (* KW_TI *);
  282 (* KW_FE *);
  283 (* KW_AX *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* VAR *);
  258 (* NAME *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\007\000\005\000\005\000\005\000\008\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\006\000\006\000\004\000\001\000\006\000\
\006\000\006\000\004\000\004\000\004\000\004\000\008\000\006\000\
\005\000\003\000\003\000\001\000\005\000\001\000\001\000\001\000\
\003\000\003\000\003\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\029\000\000\000\000\000\000\000\001\000\
\003\000\000\000\022\000\000\000\023\000\024\000\000\000\000\000\
\000\000\000\000\000\000\000\000\028\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\007\000\000\000\
\000\000\000\000\004\000\005\000\000\000\025\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\019\000\018\000\000\000\000\000\013\000\014\000\000\000\
\000\000\000\000\000\000\011\000\000\000\012\000\006\000\021\000\
\000\000\000\000\000\000\000\000\000\000\000\000\008\000\009\000\
\010\000\000\000\000\000\016\000\000\000\017\000\015\000"

let yydgoto = "\002\000\
\004\000\005\000\006\000\034\000\035\000\036\000\062\000\037\000"

let yysindex = "\002\000\
\244\254\000\000\004\255\000\000\011\000\244\254\009\255\000\000\
\000\000\028\255\000\000\028\255\000\000\000\000\034\255\099\255\
\049\255\028\255\028\255\028\255\000\000\028\255\008\255\010\255\
\017\255\025\255\027\255\029\255\043\255\047\255\000\000\048\255\
\050\255\096\255\000\000\000\000\053\255\000\000\054\255\015\255\
\084\255\060\255\060\255\060\255\060\255\028\255\060\255\051\255\
\060\255\028\255\028\255\024\255\024\255\024\255\079\255\083\255\
\107\255\105\255\092\255\114\255\028\255\118\255\120\255\106\255\
\109\255\000\000\000\000\052\255\060\255\000\000\000\000\028\255\
\060\255\051\255\087\255\000\000\060\255\000\000\000\000\000\000\
\119\255\116\255\124\255\122\255\060\255\126\255\000\000\000\000\
\000\000\051\255\125\255\000\000\128\255\000\000\000\000"

let yyrindex = "\000\000\
\136\000\000\000\000\000\000\000\000\000\136\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\007\000\000\000\000\000\000\000\000\000\001\000\015\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\131\000\000\000\246\255\040\000\231\255\187\255\000\000"

let yytablesize = 287
let yytable = "\015\000\
\026\000\016\000\001\000\003\000\084\000\007\000\020\000\038\000\
\039\000\040\000\008\000\041\000\010\000\042\000\027\000\043\000\
\055\000\056\000\057\000\058\000\093\000\060\000\044\000\063\000\
\011\000\018\000\019\000\020\000\011\000\012\000\045\000\022\000\
\046\000\012\000\047\000\059\000\017\000\013\000\014\000\064\000\
\065\000\013\000\014\000\081\000\018\000\019\000\020\000\083\000\
\048\000\011\000\075\000\086\000\049\000\050\000\012\000\051\000\
\022\000\053\000\061\000\091\000\080\000\082\000\013\000\014\000\
\018\000\023\000\024\000\025\000\026\000\027\000\028\000\029\000\
\030\000\031\000\032\000\033\000\023\000\024\000\025\000\026\000\
\027\000\028\000\029\000\030\000\031\000\032\000\033\000\054\000\
\069\000\070\000\085\000\066\000\067\000\068\000\018\000\019\000\
\020\000\018\000\019\000\020\000\052\000\073\000\018\000\019\000\
\020\000\021\000\018\000\019\000\020\000\018\000\019\000\020\000\
\078\000\071\000\072\000\079\000\018\000\019\000\020\000\018\000\
\019\000\020\000\088\000\074\000\076\000\087\000\018\000\019\000\
\020\000\077\000\089\000\090\000\092\000\094\000\095\000\002\000\
\009\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\026\000\026\000\026\000\000\000\026\000\
\000\000\026\000\026\000\000\000\026\000\026\000\000\000\020\000\
\026\000\027\000\027\000\027\000\000\000\027\000\020\000\027\000\
\027\000\000\000\000\000\000\000\000\000\000\000\027\000"

let yycheck = "\010\000\
\000\000\012\000\001\000\016\001\074\000\002\001\000\000\018\000\
\019\000\020\000\000\000\022\000\004\001\006\001\000\000\006\001\
\042\000\043\000\044\000\045\000\090\000\047\000\006\001\049\000\
\001\001\011\001\012\001\013\001\001\001\006\001\006\001\008\001\
\006\001\006\001\006\001\046\000\003\001\014\001\015\001\050\000\
\051\000\014\001\015\001\069\000\011\001\012\001\013\001\073\000\
\006\001\001\001\061\000\077\000\006\001\006\001\006\001\006\001\
\008\001\005\001\008\001\085\000\009\001\072\000\014\001\015\001\
\011\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\004\001\
\010\001\007\001\004\001\052\000\053\000\054\000\011\001\012\001\
\013\001\011\001\012\001\013\001\005\001\010\001\011\001\012\001\
\013\001\007\001\011\001\012\001\013\001\011\001\012\001\013\001\
\007\001\007\001\010\001\007\001\011\001\012\001\013\001\011\001\
\012\001\013\001\007\001\010\001\007\001\007\001\011\001\012\001\
\013\001\010\001\007\001\010\001\007\001\009\001\007\001\000\000\
\006\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\003\001\004\001\005\001\255\255\007\001\
\255\255\009\001\010\001\255\255\012\001\013\001\255\255\009\001\
\016\001\003\001\004\001\005\001\255\255\007\001\016\001\009\001\
\010\001\255\255\255\255\255\255\255\255\255\255\016\001"

let yynames_const = "\
  EQ\000\
  COLON\000\
  SEMICOLON\000\
  LPAR\000\
  RPAR\000\
  LBR\000\
  RBR\000\
  COMMA\000\
  CONJ\000\
  DISJ\000\
  IMPL\000\
  TOP\000\
  BOT\000\
  KW_GOAL\000\
  KW_CI\000\
  KW_CE1\000\
  KW_CE2\000\
  KW_DI1\000\
  KW_DI2\000\
  KW_DE\000\
  KW_II\000\
  KW_IE\000\
  KW_TI\000\
  KW_FE\000\
  KW_AX\000\
  EOF\000\
  "

let yynames_block = "\
  VAR\000\
  NAME\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'def_list) in
    Obj.repr(
# 25 "Parser.mly"
               ( _1 )
# 250 "Parser.ml"
               : Syntax.file))
; (fun __caml_parser_env ->
    Obj.repr(
# 29 "Parser.mly"
    ( [] )
# 256 "Parser.ml"
               : 'def_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'def) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'def_list) in
    Obj.repr(
# 30 "Parser.mly"
                 ( _1 :: _2 )
# 264 "Parser.ml"
               : 'def_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'prop) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'pf) in
    Obj.repr(
# 34 "Parser.mly"
                                  ( SGoal (_2, _4, _6) )
# 273 "Parser.ml"
               : 'def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'prop) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'pt) in
    Obj.repr(
# 35 "Parser.mly"
                                  ( TGoal (_2, _4, _6) )
# 282 "Parser.ml"
               : 'def))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'prop) in
    Obj.repr(
# 40 "Parser.mly"
                                   ( Ax _3 )
# 289 "Parser.ml"
               : 'pt))
; (fun __caml_parser_env ->
    Obj.repr(
# 41 "Parser.mly"
                                   ( TopI )
# 295 "Parser.ml"
               : 'pt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'pt) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'pt) in
    Obj.repr(
# 42 "Parser.mly"
                                   ( ConjI  (_3, _5) )
# 303 "Parser.ml"
               : 'pt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'pt) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'prop) in
    Obj.repr(
# 43 "Parser.mly"
                                   ( DisjIL (_3, _5) )
# 311 "Parser.ml"
               : 'pt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'prop) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'pt) in
    Obj.repr(
# 44 "Parser.mly"
                                   ( DisjIR (_3, _5) )
# 319 "Parser.ml"
               : 'pt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'thyp) in
    Obj.repr(
# 45 "Parser.mly"
                                   ( ImplI  _3 )
# 326 "Parser.ml"
               : 'pt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'prop) in
    Obj.repr(
# 46 "Parser.mly"
                                   ( BotE   _3 )
# 333 "Parser.ml"
               : 'pt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'pt) in
    Obj.repr(
# 47 "Parser.mly"
                                   ( ConjEL _3 )
# 340 "Parser.ml"
               : 'pt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'pt) in
    Obj.repr(
# 48 "Parser.mly"
                                   ( ConjER _3 )
# 347 "Parser.ml"
               : 'pt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'pt) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'thyp) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'thyp) in
    Obj.repr(
# 49 "Parser.mly"
                                              ( DisjE (_3, _5, _7) )
# 356 "Parser.ml"
               : 'pt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'pt) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'pt) in
    Obj.repr(
# 50 "Parser.mly"
                                   ( ImplE  (_3, _5) )
# 364 "Parser.ml"
               : 'pt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'prop) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'pt) in
    Obj.repr(
# 53 "Parser.mly"
                          ( (_2, _4) )
# 372 "Parser.ml"
               : 'thyp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'phyp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pf) in
    Obj.repr(
# 56 "Parser.mly"
                      ( PHyp (_1, _3) )
# 380 "Parser.ml"
               : 'pf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prop) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pf) in
    Obj.repr(
# 57 "Parser.mly"
                      ( PConc (_1, _3) )
# 388 "Parser.ml"
               : 'pf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'prop) in
    Obj.repr(
# 58 "Parser.mly"
                      ( PDone _1 )
# 395 "Parser.ml"
               : 'pf))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'prop) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'pf) in
    Obj.repr(
# 62 "Parser.mly"
                        ( (_2, _4) )
# 403 "Parser.ml"
               : 'phyp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 66 "Parser.mly"
                   ( Var _1 )
# 410 "Parser.ml"
               : 'prop))
; (fun __caml_parser_env ->
    Obj.repr(
# 67 "Parser.mly"
                   ( Top )
# 416 "Parser.ml"
               : 'prop))
; (fun __caml_parser_env ->
    Obj.repr(
# 68 "Parser.mly"
                   ( Bot )
# 422 "Parser.ml"
               : 'prop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prop) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prop) in
    Obj.repr(
# 69 "Parser.mly"
                   ( Conj (_1, _3) )
# 430 "Parser.ml"
               : 'prop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prop) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prop) in
    Obj.repr(
# 70 "Parser.mly"
                   ( Disj (_1, _3) )
# 438 "Parser.ml"
               : 'prop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'prop) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prop) in
    Obj.repr(
# 71 "Parser.mly"
                   ( Impl (_1, _3) )
# 446 "Parser.ml"
               : 'prop))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'prop) in
    Obj.repr(
# 72 "Parser.mly"
                   ( _2 )
# 453 "Parser.ml"
               : 'prop))
(* Entry file *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let file (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.file)
